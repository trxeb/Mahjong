{"ast":null,"code":"var _jsxFileName = \"/Users/angyi/Documents/GitHub/Mahjong/client/src/pages/RecordsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom';\nimport { doc, onSnapshot, updateDoc, arrayUnion } from 'firebase/firestore';\nimport { db } from '../firebase-config';\nimport { useAuth } from '../hooks/useAuth';\nimport FlowerModal from '../components/FlowerModal';\nimport DeclareWinModal from '../components/DeclareWinModal';\nimport { Container, Row, Col, Button, Card, CardBody, Input } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUndo, faClipboard, faFan, faCoins, faChartBar, faTrophy, faPlus, faHandshake } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst seatValueMap = {\n  'East (東)': 1,\n  'South (南)': 2,\n  'West (西)': 3,\n  'North (北)': 4\n};\nconst windRotationMap = {\n  'East (東)': 'North (北)',\n  'South (南)': 'East (東)',\n  'West (西)': 'South (南)',\n  'North (北)': 'West (西)'\n};\nconst RecordsPage = () => {\n  _s();\n  const {\n    roomCode\n  } = useParams();\n  const navigate = useNavigate();\n  const {\n    user: currentUser\n  } = useAuth();\n  const [players, setPlayers] = useState([]);\n  const [selectedFlowerPlayer, setSelectedFlowerPlayer] = useState('');\n  const [selectedKongType, setSelectedKongType] = useState('Concealed Kong');\n  const [selectedKongTarget, setSelectedKongTarget] = useState('');\n  const [room, setRoom] = useState(null);\n  const [roomExists, setRoomExists] = useState(true);\n  const [highestScore, setHighestScore] = useState(-Infinity);\n  const [mostWins, setMostWins] = useState(-1);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [winModalOpen, setWinModalOpen] = useState(false);\n  useEffect(() => {\n    if (!roomCode) return;\n    const roomRef = doc(db, 'rooms', roomCode);\n    const unsubscribe = onSnapshot(roomRef, docSnap => {\n      if (docSnap.exists()) {\n        setRoomExists(true);\n        const roomData = docSnap.data();\n        setRoom(roomData);\n\n        // If the round is over, navigate all players back to the lobby\n        if (roomData.status === 'lobby') {\n          navigate(`/gamemaster/${roomCode}`);\n          return; // Stop processing to avoid errors on an unmounted component\n        }\n        const currentPlayers = roomData.players || [];\n        setPlayers(currentPlayers);\n        const otherPlayers = currentPlayers.filter(p => p.uid !== (currentUser === null || currentUser === void 0 ? void 0 : currentUser.uid));\n        if (currentPlayers.length > 0) {\n          if (!selectedFlowerPlayer && otherPlayers.length > 0) {\n            setSelectedFlowerPlayer(otherPlayers[0].uid);\n          }\n          if (!selectedKongTarget && otherPlayers.length > 0) {\n            setSelectedKongTarget(otherPlayers[0].uid);\n          }\n          const scores = currentPlayers.map(p => p.score);\n          setHighestScore(Math.max(...scores));\n          const wins = currentPlayers.map(p => p.gamesWon || 0);\n          const maxWins = Math.max(...wins);\n          setMostWins(maxWins > 0 ? maxWins : -1);\n        }\n      } else {\n        setRoomExists(false);\n      }\n    });\n    return () => unsubscribe();\n  }, [roomCode, navigate, currentUser === null || currentUser === void 0 ? void 0 : currentUser.uid]);\n  const calculateFlowerBonuses = (actingPlayer, tile, currentPlayers) => {\n    let updatedPlayers = [...currentPlayers];\n    let bonusTai = 0;\n    let setBonus = false;\n    const playerIndex = updatedPlayers.findIndex(p => p.uid === actingPlayer.uid);\n    const player = updatedPlayers[playerIndex];\n    const playerTiles = [...player.flowerTiles, tile]; // Temporarily add new tile for calculation\n\n    // Rule 1: Own Seat Flower\n    const seatValue = seatValueMap[player.wind];\n    const hasOwnSeason = playerTiles.some(t => t.group === 'SEASONS' && t.value === seatValue);\n    const hasOwnFlower = playerTiles.some(t => t.group === 'FLOWERS' && t.value === seatValue);\n    if (hasOwnSeason && hasOwnFlower) {\n      bonusTai += 1;\n    }\n\n    // Rule 2: Full Set\n    const seasonTiles = playerTiles.filter(t => t.group === 'SEASONS');\n    const flowerTiles = playerTiles.filter(t => t.group === 'FLOWERS');\n    if (seasonTiles.length === 4 || flowerTiles.length === 4) {\n      bonusTai += 2;\n      setBonus = true; // A full set bonus\n    }\n\n    // Rule 3: Animal Pair\n    const hasCat = playerTiles.some(t => t.id === 'a1');\n    const hasRat = playerTiles.some(t => t.id === 'a2');\n    const hasRooster = playerTiles.some(t => t.id === 'a3');\n    const hasCentipede = playerTiles.some(t => t.id === 'a4');\n    if (hasCat && hasRat || hasRooster && hasCentipede) {\n      bonusTai += 1;\n    }\n\n    // This is a simplified bonus calculation. A real game might have more complex rules.\n    // For now, we calculate total bonus and distribute\n    const existingBonus = player.flowerBonus || 0;\n    const newBonus = bonusTai - existingBonus;\n    if (newBonus > 0) {\n      const chips = setBonus ? 2 : 1; // 2 chips for a full set, 1 for others\n      const taiPerPlayer = chips;\n      updatedPlayers[playerIndex].score += chips * 3;\n      updatedPlayers[playerIndex].flowerBonus = bonusTai;\n      updatedPlayers.forEach((p, index) => {\n        if (index !== playerIndex) {\n          updatedPlayers[index].score -= taiPerPlayer;\n        }\n      });\n    }\n    return updatedPlayers;\n  };\n  const handleFlowerSelect = async tile => {\n    setModalOpen(false);\n    if (!currentUser || !room) return;\n    const roomRef = doc(db, 'rooms', roomCode);\n    let currentPlayers = [...room.players];\n    const playerIndex = currentPlayers.findIndex(p => p.uid === currentUser.uid);\n    if (playerIndex === -1) {\n      console.error(\"Current user not found in the room's players list.\");\n      return;\n    }\n    const actingPlayer = {\n      ...currentPlayers[playerIndex]\n    };\n    actingPlayer.flowerTiles = [...(actingPlayer.flowerTiles || []), tile];\n\n    // Calculate bonuses and update all players' scores\n    const updatedPlayersWithBonuses = calculateFlowerBonuses(actingPlayer, tile, currentPlayers);\n\n    // Remove the selected tile from the available list\n    const updatedAvailableTiles = room.availableFlowerTiles.filter(t => t.id !== tile.id);\n    await updateDoc(roomRef, {\n      players: updatedPlayersWithBonuses,\n      availableFlowerTiles: updatedAvailableTiles,\n      history: arrayUnion({\n        type: 'flower_add',\n        actor: currentUser.uid,\n        tile: tile,\n        timestamp: new Date()\n      })\n    });\n  };\n  const handleRecordFlower = async () => {\n    if (!currentUser || !selectedFlowerPlayer || currentUser.uid === selectedFlowerPlayer) {\n      console.log(\"Invalid flower action: Cannot select yourself.\");\n      return;\n    }\n    const actorIndex = room.players.findIndex(p => p.uid === currentUser.uid);\n    const targetIndex = room.players.findIndex(p => p.uid === selectedFlowerPlayer);\n    if (actorIndex === -1 || targetIndex === -1) return;\n    const updatedPlayers = [...room.players];\n    updatedPlayers[actorIndex].score += 1;\n    updatedPlayers[targetIndex].score -= 1;\n    const roomRef = doc(db, 'rooms', roomCode);\n    await updateDoc(roomRef, {\n      players: updatedPlayers,\n      history: arrayUnion({\n        type: 'flower',\n        actor: currentUser.uid,\n        target: selectedFlowerPlayer,\n        timestamp: new Date()\n      })\n    });\n  };\n  const handleRecordKong = async () => {\n    if (!currentUser) return;\n    const actorIndex = room.players.findIndex(p => p.uid === currentUser.uid);\n    if (actorIndex === -1) return;\n    const updatedPlayers = [...room.players];\n    let historyEntry = {\n      type: 'kong',\n      kongType: selectedKongType,\n      actor: currentUser.uid,\n      timestamp: new Date()\n    };\n    if (selectedKongType === 'Concealed Kong') {\n      // Per the rule \"if you draw yourself = 2 chips\", the declarer is paid by all 3 opponents.\n      // The declarer gains 6 points (2 chips * 3 players), and each opponent loses 2 points.\n      updatedPlayers[actorIndex].score += 6;\n      updatedPlayers.forEach((p, index) => {\n        if (index !== actorIndex) {\n          updatedPlayers[index].score -= 2;\n        }\n      });\n    } else {\n      // Melded Kong\n      // Per the rule \"if someone threw it = 1 chip\", the declarer is paid by the discarder.\n      // The declarer gains 1 point, and the target loses 1 point.\n      const targetIndex = room.players.findIndex(p => p.uid === selectedKongTarget);\n      if (targetIndex === -1) return;\n      updatedPlayers[actorIndex].score += 1;\n      updatedPlayers[targetIndex].score -= 1;\n      historyEntry.target = selectedKongTarget;\n    }\n    const roomRef = doc(db, 'rooms', roomCode);\n    await updateDoc(roomRef, {\n      players: updatedPlayers,\n      history: arrayUnion(historyEntry)\n    });\n  };\n  const handleUndoLastAction = async () => {\n    if (!room || !room.history || room.history.length === 0) {\n      console.log(\"No actions to undo.\");\n      return;\n    }\n    const lastAction = room.history[room.history.length - 1];\n    let updatedPlayers = JSON.parse(JSON.stringify(room.players)); // Deep copy\n\n    // Revert the changes based on the last action type\n    switch (lastAction.type) {\n      case 'kong':\n        const actorIndex = updatedPlayers.findIndex(p => p.uid === lastAction.actor);\n        if (actorIndex === -1) break;\n        if (lastAction.kongType === 'Concealed Kong') {\n          // Reverse the 2-chip rule\n          updatedPlayers[actorIndex].score -= 6;\n          updatedPlayers.forEach((p, index) => {\n            if (index !== actorIndex) p.score += 2;\n          });\n        } else {\n          // Melded Kong\n          // Reverse the 1-chip rule\n          const targetIndex = updatedPlayers.findIndex(p => p.uid === lastAction.target);\n          if (targetIndex === -1) break;\n          updatedPlayers[actorIndex].score -= 1;\n          updatedPlayers[targetIndex].score += 1;\n        }\n        break;\n      case 'flower_add':\n        // This is a complex operation. For now, we will find the player,\n        // remove the tile, and add it back to the available pool.\n        // A full score recalculation is the safest way to ensure correctness.\n\n        const flowerActorIndex = updatedPlayers.findIndex(p => p.uid === lastAction.actor);\n        if (flowerActorIndex === -1) break;\n\n        // For simplicity, we assume the last added tile is what's being removed.\n        // This could be improved with more detailed history logging.\n        const lastTile = lastAction.tile;\n        updatedPlayers[flowerActorIndex].flowerTiles = updatedPlayers[flowerActorIndex].flowerTiles.filter(t => t.id !== lastTile.id);\n\n        // We'll revert to the scores stored *before* this action if we logged them.\n        // Since we don't have that, a full recalculation would be needed.\n        // The current implementation will just remove the tile but not revert score.\n        // This will be fixed in a future update. For now, let's just make the tile available again.\n\n        const updatedAvailableTiles = [...room.availableFlowerTiles, lastAction.tile];\n\n        // NOTE: Score reversal for flowers is not yet implemented.\n        // This is a placeholder for a more robust solution.\n        // For now, the main effect is making the tile available again.\n\n        const roomRefForFlower = doc(db, 'rooms', roomCode);\n        await updateDoc(roomRefForFlower, {\n          players: updatedPlayers,\n          availableFlowerTiles: updatedAvailableTiles,\n          history: room.history.slice(0, -1) // Remove last action\n        });\n        return;\n      // Exit early for flower undo\n\n      default:\n        console.log(\"Unknown action type, cannot undo:\", lastAction.type);\n        return;\n    }\n\n    // Update database for non-flower actions\n    const roomRef = doc(db, 'rooms', roomCode);\n    await updateDoc(roomRef, {\n      players: updatedPlayers,\n      history: room.history.slice(0, -1) // Remove last action\n    });\n  };\n  const handleDeclareWin = async ({\n    isSelfDrawn,\n    losingPlayerId,\n    taiValue\n  }) => {\n    const roomRef = doc(db, 'rooms', roomCode);\n    let updatedPlayers = JSON.parse(JSON.stringify(room.players)); // Deep copy\n\n    const winnerIndex = updatedPlayers.findIndex(p => p.uid === currentUser.uid);\n    if (winnerIndex === -1) return;\n    updatedPlayers[winnerIndex].gamesWon = (updatedPlayers[winnerIndex].gamesWon || 0) + 1;\n    if (isSelfDrawn) {\n      // Self-Drawn win: Paid by all 3 opponents\n      const pointsFromEach = Math.pow(2, taiValue - 1); // e.g., 3 tai -> 2^2=4 points from each\n      const totalGain = pointsFromEach * (updatedPlayers.length - 1);\n      updatedPlayers[winnerIndex].score += totalGain;\n      updatedPlayers.forEach((p, index) => {\n        if (index !== winnerIndex) {\n          p.score -= pointsFromEach;\n        }\n      });\n    } else {\n      // Win on discard\n      const loserIndex = updatedPlayers.findIndex(p => p.uid === losingPlayerId);\n      if (loserIndex === -1) return;\n      const points = Math.pow(2, taiValue); // e.g., 3 tai -> 2^3=8 points\n      updatedPlayers[winnerIndex].score += points;\n      updatedPlayers[loserIndex].score -= points;\n    }\n\n    // --- Wind Rotation Logic ---\n    const winner = updatedPlayers[winnerIndex];\n    const eastPlayerWind = 'East (東)';\n\n    // Rotate winds ONLY if the winner is NOT East\n    if (winner.wind !== eastPlayerWind) {\n      updatedPlayers = updatedPlayers.map(p => {\n        const newWind = windRotationMap[p.wind];\n        // Defensive check to prevent undefined wind values\n        return {\n          ...p,\n          wind: newWind || p.wind\n        };\n      });\n    }\n\n    // Defensive check to ensure losingPlayerId is never undefined\n    const finalLosingPlayerId = isSelfDrawn ? null : losingPlayerId || null;\n    await updateDoc(roomRef, {\n      players: updatedPlayers,\n      status: 'lobby',\n      history: arrayUnion({\n        type: 'win',\n        actor: currentUser.uid,\n        isSelfDrawn,\n        losingPlayer: finalLosingPlayerId,\n        tai: taiValue,\n        timestamp: new Date()\n      })\n    });\n  };\n  const handleDeclareDraw = async () => {\n    let updatedPlayers = JSON.parse(JSON.stringify(room.players));\n    const history = room.history || [];\n\n    // Find the index of the last round-ending event to isolate the current round's history.\n    let lastRoundEndIndex = -1;\n    for (let i = history.length - 1; i >= 0; i--) {\n      if (history[i].type === 'win' || history[i].type === 'draw') {\n        lastRoundEndIndex = i;\n        break;\n      }\n    }\n    const currentRoundHistory = history.slice(lastRoundEndIndex + 1);\n\n    // Check if \"money has changed hands\" (i.e., any scoring action occurred during the round).\n    const moneyChangedHands = currentRoundHistory.some(action => action.type === 'kong' || action.type === 'flower_add');\n\n    // On a draw, winds rotate ONLY if money changed hands.\n    if (moneyChangedHands) {\n      updatedPlayers = updatedPlayers.map(p => ({\n        ...p,\n        wind: windRotationMap[p.wind]\n      }));\n    }\n    const roomRef = doc(db, 'rooms', roomCode);\n    await updateDoc(roomRef, {\n      players: updatedPlayers,\n      status: 'lobby',\n      history: arrayUnion({\n        type: 'draw',\n        moneyChangedHands: moneyChangedHands,\n        timestamp: new Date()\n      })\n    });\n  };\n  const toggleModal = () => setModalOpen(!modalOpen);\n  const toggleWinModal = () => setWinModalOpen(!winModalOpen);\n  if (!roomExists) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"records-background text-center py-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Room Not Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The room with code \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: roomCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 39\n        }, this), \" does not exist.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 13\n    }, this);\n  }\n  const ActionCard = ({\n    title,\n    children\n  }) => /*#__PURE__*/_jsxDEV(Col, {\n    md: 4,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"action-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"mb-3\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }, this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 420,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"records-background\",\n    children: [/*#__PURE__*/_jsxDEV(FlowerModal, {\n      isOpen: modalOpen,\n      toggle: toggleModal,\n      onSelect: handleFlowerSelect,\n      availableTiles: (room === null || room === void 0 ? void 0 : room.availableFlowerTiles) || []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DeclareWinModal, {\n      isOpen: winModalOpen,\n      toggle: toggleWinModal,\n      players: players,\n      currentUser: currentUser,\n      room: room,\n      onDeclare: handleDeclareWin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"py-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"records-container p-4 rounded-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faClipboard\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 42\n          }, this), \" Game Records\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"mb-5\",\n          children: [/*#__PURE__*/_jsxDEV(ActionCard, {\n            title: \"\\u80E1 (Hu - Win)\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              className: \"btn-declare-win w-100\",\n              onClick: toggleWinModal,\n              children: \"\\uD83C\\uDF89 Declare Win\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ActionCard, {\n            title: \"\\u82B1 (Hua - Flower)\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              className: \"btn-record-action w-100\",\n              onClick: toggleModal,\n              children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faPlus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 453,\n                columnNumber: 33\n              }, this), \" Add Flower Tile\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ActionCard, {\n            title: \"\\u69D3 (Gang - Kong)\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              type: \"select\",\n              className: \"mb-2\",\n              value: selectedKongType,\n              onChange: e => setSelectedKongType(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Concealed Kong\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 458,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Melded Kong\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 30\n            }, this), selectedKongType === 'Melded Kong' && /*#__PURE__*/_jsxDEV(Input, {\n              type: \"select\",\n              className: \"mb-2\",\n              value: selectedKongTarget,\n              onChange: e => setSelectedKongTarget(e.target.value),\n              children: players.filter(p => p.uid !== (currentUser === null || currentUser === void 0 ? void 0 : currentUser.uid)).map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: p.uid,\n                children: [p.wind, \" - \", p.name]\n              }, p.uid, true, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 95\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: \"btn-record-action w-100\",\n              onClick: handleRecordKong,\n              children: \"\\u25A0 Record Kong\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"my-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"action-section text-md-start\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"mb-3\",\n                children: \"Other Actions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"btn-record-action me-2\",\n                onClick: handleUndoLastAction,\n                children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faUndo\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 476,\n                  columnNumber: 107\n                }, this), \" Undo Last Action\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"btn-record-action\",\n                onClick: handleDeclareDraw,\n                children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: faHandshake\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 477,\n                  columnNumber: 99\n                }, this), \" Declare Draw\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-center mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faTrophy\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 54\n          }, this), \" Current Scores\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: players.map(player => /*#__PURE__*/_jsxDEV(Col, {\n            md: 6,\n            className: \"mb-4\",\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              className: `player-score-card h-100 ${player.score === highestScore ? 'highlight' : ''}`,\n              children: /*#__PURE__*/_jsxDEV(CardBody, {\n                className: \"text-center d-flex flex-column justify-content-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"wind-indicator\",\n                  children: player.wind\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 490,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"player-name mt-2\",\n                  children: player.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 491,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"player-score my-1\",\n                  children: [player.score > 0 ? '+' : '', player.score]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 492,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  className: \"text-muted mt-auto\",\n                  children: [\"Wind: \", player.wind.split(' ')[0], \" | Games Won: \", player.gamesWon || 0, player.gamesWon === mostWins && mostWins !== -1 && /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                    icon: faTrophy,\n                    className: \"ms-2 text-warning\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 495,\n                    columnNumber: 97\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 493,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 489,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 488,\n              columnNumber: 33\n            }, this)\n          }, player.uid, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 429,\n    columnNumber: 9\n  }, this);\n};\n_s(RecordsPage, \"DFLFoAQGQQ+xQjiWoLXIwed3nqQ=\", false, function () {\n  return [useParams, useNavigate, useAuth];\n});\n_c = RecordsPage;\nexport default RecordsPage;\nvar _c;\n$RefreshReg$(_c, \"RecordsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","useNavigate","doc","onSnapshot","updateDoc","arrayUnion","db","useAuth","FlowerModal","DeclareWinModal","Container","Row","Col","Button","Card","CardBody","Input","FontAwesomeIcon","faUndo","faClipboard","faFan","faCoins","faChartBar","faTrophy","faPlus","faHandshake","jsxDEV","_jsxDEV","seatValueMap","windRotationMap","RecordsPage","_s","roomCode","navigate","user","currentUser","players","setPlayers","selectedFlowerPlayer","setSelectedFlowerPlayer","selectedKongType","setSelectedKongType","selectedKongTarget","setSelectedKongTarget","room","setRoom","roomExists","setRoomExists","highestScore","setHighestScore","Infinity","mostWins","setMostWins","modalOpen","setModalOpen","winModalOpen","setWinModalOpen","roomRef","unsubscribe","docSnap","exists","roomData","data","status","currentPlayers","otherPlayers","filter","p","uid","length","scores","map","score","Math","max","wins","gamesWon","maxWins","calculateFlowerBonuses","actingPlayer","tile","updatedPlayers","bonusTai","setBonus","playerIndex","findIndex","player","playerTiles","flowerTiles","seatValue","wind","hasOwnSeason","some","t","group","value","hasOwnFlower","seasonTiles","hasCat","id","hasRat","hasRooster","hasCentipede","existingBonus","flowerBonus","newBonus","chips","taiPerPlayer","forEach","index","handleFlowerSelect","console","error","updatedPlayersWithBonuses","updatedAvailableTiles","availableFlowerTiles","history","type","actor","timestamp","Date","handleRecordFlower","log","actorIndex","targetIndex","target","handleRecordKong","historyEntry","kongType","handleUndoLastAction","lastAction","JSON","parse","stringify","flowerActorIndex","lastTile","roomRefForFlower","slice","handleDeclareWin","isSelfDrawn","losingPlayerId","taiValue","winnerIndex","pointsFromEach","pow","totalGain","loserIndex","points","winner","eastPlayerWind","newWind","finalLosingPlayerId","losingPlayer","tai","handleDeclareDraw","lastRoundEndIndex","i","currentRoundHistory","moneyChangedHands","action","toggleModal","toggleWinModal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ActionCard","title","md","isOpen","toggle","onSelect","availableTiles","onDeclare","icon","onClick","onChange","e","name","split","_c","$RefreshReg$"],"sources":["/Users/angyi/Documents/GitHub/Mahjong/client/src/pages/RecordsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom';\nimport { doc, onSnapshot, updateDoc, arrayUnion } from 'firebase/firestore';\nimport { db } from '../firebase-config';\nimport { useAuth } from '../hooks/useAuth';\nimport FlowerModal from '../components/FlowerModal';\nimport DeclareWinModal from '../components/DeclareWinModal';\nimport { Container, Row, Col, Button, Card, CardBody, Input } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUndo, faClipboard, faFan, faCoins, faChartBar, faTrophy, faPlus, faHandshake } from '@fortawesome/free-solid-svg-icons';\n\nconst seatValueMap = { 'East (東)': 1, 'South (南)': 2, 'West (西)': 3, 'North (北)': 4 };\nconst windRotationMap = {\n    'East (東)': 'North (北)',\n    'South (南)': 'East (東)',\n    'West (西)': 'South (南)',\n    'North (北)': 'West (西)',\n};\n\nconst RecordsPage = () => {\n    const { roomCode } = useParams();\n    const navigate = useNavigate();\n    const { user: currentUser } = useAuth();\n    const [players, setPlayers] = useState([]);\n    const [selectedFlowerPlayer, setSelectedFlowerPlayer] = useState('');\n    const [selectedKongType, setSelectedKongType] = useState('Concealed Kong');\n    const [selectedKongTarget, setSelectedKongTarget] = useState('');\n    const [room, setRoom] = useState(null);\n    const [roomExists, setRoomExists] = useState(true);\n    const [highestScore, setHighestScore] = useState(-Infinity);\n    const [mostWins, setMostWins] = useState(-1);\n    const [modalOpen, setModalOpen] = useState(false);\n    const [winModalOpen, setWinModalOpen] = useState(false);\n\n    useEffect(() => {\n        if (!roomCode) return;\n        const roomRef = doc(db, 'rooms', roomCode);\n\n        const unsubscribe = onSnapshot(roomRef, (docSnap) => {\n            if (docSnap.exists()) {\n                setRoomExists(true);\n                const roomData = docSnap.data();\n                setRoom(roomData);\n\n                // If the round is over, navigate all players back to the lobby\n                if (roomData.status === 'lobby') {\n                    navigate(`/gamemaster/${roomCode}`);\n                    return; // Stop processing to avoid errors on an unmounted component\n                }\n\n                const currentPlayers = roomData.players || [];\n                setPlayers(currentPlayers);\n\n                const otherPlayers = currentPlayers.filter(p => p.uid !== currentUser?.uid);\n                if (currentPlayers.length > 0) {\n                    if (!selectedFlowerPlayer && otherPlayers.length > 0) {\n                        setSelectedFlowerPlayer(otherPlayers[0].uid);\n                    }\n                    if (!selectedKongTarget && otherPlayers.length > 0) {\n                        setSelectedKongTarget(otherPlayers[0].uid);\n                    }\n                    \n                    const scores = currentPlayers.map(p => p.score);\n                    setHighestScore(Math.max(...scores));\n                    \n                    const wins = currentPlayers.map(p => p.gamesWon || 0);\n                    const maxWins = Math.max(...wins);\n                    setMostWins(maxWins > 0 ? maxWins : -1);\n                }\n            } else {\n                setRoomExists(false);\n            }\n        });\n\n        return () => unsubscribe();\n    }, [roomCode, navigate, currentUser?.uid]);\n\n    const calculateFlowerBonuses = (actingPlayer, tile, currentPlayers) => {\n        let updatedPlayers = [...currentPlayers];\n        let bonusTai = 0;\n        let setBonus = false;\n\n        const playerIndex = updatedPlayers.findIndex(p => p.uid === actingPlayer.uid);\n        const player = updatedPlayers[playerIndex];\n        const playerTiles = [...player.flowerTiles, tile]; // Temporarily add new tile for calculation\n\n        // Rule 1: Own Seat Flower\n        const seatValue = seatValueMap[player.wind];\n        const hasOwnSeason = playerTiles.some(t => t.group === 'SEASONS' && t.value === seatValue);\n        const hasOwnFlower = playerTiles.some(t => t.group === 'FLOWERS' && t.value === seatValue);\n        if (hasOwnSeason && hasOwnFlower) {\n            bonusTai += 1;\n        }\n\n        // Rule 2: Full Set\n        const seasonTiles = playerTiles.filter(t => t.group === 'SEASONS');\n        const flowerTiles = playerTiles.filter(t => t.group === 'FLOWERS');\n        if (seasonTiles.length === 4 || flowerTiles.length === 4) {\n            bonusTai += 2;\n            setBonus = true; // A full set bonus\n        }\n\n        // Rule 3: Animal Pair\n        const hasCat = playerTiles.some(t => t.id === 'a1');\n        const hasRat = playerTiles.some(t => t.id === 'a2');\n        const hasRooster = playerTiles.some(t => t.id === 'a3');\n        const hasCentipede = playerTiles.some(t => t.id === 'a4');\n        if ((hasCat && hasRat) || (hasRooster && hasCentipede)) {\n            bonusTai += 1;\n        }\n        \n        // This is a simplified bonus calculation. A real game might have more complex rules.\n        // For now, we calculate total bonus and distribute\n        const existingBonus = player.flowerBonus || 0;\n        const newBonus = bonusTai - existingBonus;\n\n        if (newBonus > 0) {\n            const chips = setBonus ? 2 : 1; // 2 chips for a full set, 1 for others\n            const taiPerPlayer = chips;\n            \n            updatedPlayers[playerIndex].score += (chips * 3);\n            updatedPlayers[playerIndex].flowerBonus = bonusTai;\n\n            updatedPlayers.forEach((p, index) => {\n                if (index !== playerIndex) {\n                    updatedPlayers[index].score -= taiPerPlayer;\n                }\n            });\n        }\n        \n        return updatedPlayers;\n    };\n\n    const handleFlowerSelect = async (tile) => {\n        setModalOpen(false);\n        if (!currentUser || !room) return;\n\n        const roomRef = doc(db, 'rooms', roomCode);\n        let currentPlayers = [...room.players];\n        const playerIndex = currentPlayers.findIndex(p => p.uid === currentUser.uid);\n\n        if (playerIndex === -1) {\n            console.error(\"Current user not found in the room's players list.\");\n            return;\n        }\n        \n        const actingPlayer = { ...currentPlayers[playerIndex] };\n        actingPlayer.flowerTiles = [...(actingPlayer.flowerTiles || []), tile];\n        \n        // Calculate bonuses and update all players' scores\n        const updatedPlayersWithBonuses = calculateFlowerBonuses(actingPlayer, tile, currentPlayers);\n\n        // Remove the selected tile from the available list\n        const updatedAvailableTiles = room.availableFlowerTiles.filter(t => t.id !== tile.id);\n\n        await updateDoc(roomRef, {\n            players: updatedPlayersWithBonuses,\n            availableFlowerTiles: updatedAvailableTiles,\n            history: arrayUnion({\n                type: 'flower_add',\n                actor: currentUser.uid,\n                tile: tile,\n                timestamp: new Date(),\n            })\n        });\n    };\n\n    const handleRecordFlower = async () => {\n        if (!currentUser || !selectedFlowerPlayer || currentUser.uid === selectedFlowerPlayer) {\n            console.log(\"Invalid flower action: Cannot select yourself.\");\n            return;\n        }\n\n        const actorIndex = room.players.findIndex(p => p.uid === currentUser.uid);\n        const targetIndex = room.players.findIndex(p => p.uid === selectedFlowerPlayer);\n\n        if (actorIndex === -1 || targetIndex === -1) return;\n\n        const updatedPlayers = [...room.players];\n        updatedPlayers[actorIndex].score += 1;\n        updatedPlayers[targetIndex].score -= 1;\n\n        const roomRef = doc(db, 'rooms', roomCode);\n        await updateDoc(roomRef, {\n            players: updatedPlayers,\n            history: arrayUnion({\n                type: 'flower',\n                actor: currentUser.uid,\n                target: selectedFlowerPlayer,\n                timestamp: new Date(),\n            })\n        });\n    };\n\n    const handleRecordKong = async () => {\n        if (!currentUser) return;\n\n        const actorIndex = room.players.findIndex(p => p.uid === currentUser.uid);\n        if (actorIndex === -1) return;\n        \n        const updatedPlayers = [...room.players];\n        let historyEntry = {\n            type: 'kong',\n            kongType: selectedKongType,\n            actor: currentUser.uid,\n            timestamp: new Date(),\n        };\n\n        if (selectedKongType === 'Concealed Kong') {\n            // Per the rule \"if you draw yourself = 2 chips\", the declarer is paid by all 3 opponents.\n            // The declarer gains 6 points (2 chips * 3 players), and each opponent loses 2 points.\n            updatedPlayers[actorIndex].score += 6;\n            updatedPlayers.forEach((p, index) => {\n                if (index !== actorIndex) {\n                    updatedPlayers[index].score -= 2;\n                }\n            });\n        } else { // Melded Kong\n            // Per the rule \"if someone threw it = 1 chip\", the declarer is paid by the discarder.\n            // The declarer gains 1 point, and the target loses 1 point.\n            const targetIndex = room.players.findIndex(p => p.uid === selectedKongTarget);\n            if (targetIndex === -1) return;\n            \n            updatedPlayers[actorIndex].score += 1;\n            updatedPlayers[targetIndex].score -= 1;\n            historyEntry.target = selectedKongTarget;\n        }\n\n        const roomRef = doc(db, 'rooms', roomCode);\n        await updateDoc(roomRef, {\n            players: updatedPlayers,\n            history: arrayUnion(historyEntry)\n        });\n    };\n\n    const handleUndoLastAction = async () => {\n        if (!room || !room.history || room.history.length === 0) {\n            console.log(\"No actions to undo.\");\n            return;\n        }\n\n        const lastAction = room.history[room.history.length - 1];\n        let updatedPlayers = JSON.parse(JSON.stringify(room.players)); // Deep copy\n\n        // Revert the changes based on the last action type\n        switch (lastAction.type) {\n            case 'kong':\n                const actorIndex = updatedPlayers.findIndex(p => p.uid === lastAction.actor);\n                if (actorIndex === -1) break;\n\n                if (lastAction.kongType === 'Concealed Kong') {\n                    // Reverse the 2-chip rule\n                    updatedPlayers[actorIndex].score -= 6;\n                    updatedPlayers.forEach((p, index) => {\n                        if (index !== actorIndex) p.score += 2;\n                    });\n                } else { // Melded Kong\n                    // Reverse the 1-chip rule\n                    const targetIndex = updatedPlayers.findIndex(p => p.uid === lastAction.target);\n                    if (targetIndex === -1) break;\n                    updatedPlayers[actorIndex].score -= 1;\n                    updatedPlayers[targetIndex].score += 1;\n                }\n                break;\n            \n            case 'flower_add':\n                // This is a complex operation. For now, we will find the player,\n                // remove the tile, and add it back to the available pool.\n                // A full score recalculation is the safest way to ensure correctness.\n                \n                const flowerActorIndex = updatedPlayers.findIndex(p => p.uid === lastAction.actor);\n                if (flowerActorIndex === -1) break;\n\n                // For simplicity, we assume the last added tile is what's being removed.\n                // This could be improved with more detailed history logging.\n                const lastTile = lastAction.tile;\n                updatedPlayers[flowerActorIndex].flowerTiles = updatedPlayers[flowerActorIndex].flowerTiles.filter(t => t.id !== lastTile.id);\n                \n                // We'll revert to the scores stored *before* this action if we logged them.\n                // Since we don't have that, a full recalculation would be needed.\n                // The current implementation will just remove the tile but not revert score.\n                // This will be fixed in a future update. For now, let's just make the tile available again.\n                \n                const updatedAvailableTiles = [...room.availableFlowerTiles, lastAction.tile];\n                \n                // NOTE: Score reversal for flowers is not yet implemented.\n                // This is a placeholder for a more robust solution.\n                // For now, the main effect is making the tile available again.\n\n                const roomRefForFlower = doc(db, 'rooms', roomCode);\n                await updateDoc(roomRefForFlower, {\n                    players: updatedPlayers,\n                    availableFlowerTiles: updatedAvailableTiles,\n                    history: room.history.slice(0, -1) // Remove last action\n                });\n                return; // Exit early for flower undo\n\n            default:\n                console.log(\"Unknown action type, cannot undo:\", lastAction.type);\n                return;\n        }\n\n        // Update database for non-flower actions\n        const roomRef = doc(db, 'rooms', roomCode);\n        await updateDoc(roomRef, {\n            players: updatedPlayers,\n            history: room.history.slice(0, -1) // Remove last action\n        });\n    };\n\n    const handleDeclareWin = async ({ isSelfDrawn, losingPlayerId, taiValue }) => {\n        const roomRef = doc(db, 'rooms', roomCode);\n        let updatedPlayers = JSON.parse(JSON.stringify(room.players)); // Deep copy\n        \n        const winnerIndex = updatedPlayers.findIndex(p => p.uid === currentUser.uid);\n        if (winnerIndex === -1) return;\n\n        updatedPlayers[winnerIndex].gamesWon = (updatedPlayers[winnerIndex].gamesWon || 0) + 1;\n\n        if (isSelfDrawn) {\n            // Self-Drawn win: Paid by all 3 opponents\n            const pointsFromEach = Math.pow(2, taiValue - 1); // e.g., 3 tai -> 2^2=4 points from each\n            const totalGain = pointsFromEach * (updatedPlayers.length - 1);\n            \n            updatedPlayers[winnerIndex].score += totalGain;\n            updatedPlayers.forEach((p, index) => {\n                if (index !== winnerIndex) {\n                    p.score -= pointsFromEach;\n                }\n            });\n        } else {\n            // Win on discard\n            const loserIndex = updatedPlayers.findIndex(p => p.uid === losingPlayerId);\n            if (loserIndex === -1) return;\n\n            const points = Math.pow(2, taiValue); // e.g., 3 tai -> 2^3=8 points\n            updatedPlayers[winnerIndex].score += points;\n            updatedPlayers[loserIndex].score -= points;\n        }\n\n        // --- Wind Rotation Logic ---\n        const winner = updatedPlayers[winnerIndex];\n        const eastPlayerWind = 'East (東)';\n    \n        // Rotate winds ONLY if the winner is NOT East\n        if (winner.wind !== eastPlayerWind) {\n            updatedPlayers = updatedPlayers.map(p => {\n                const newWind = windRotationMap[p.wind];\n                // Defensive check to prevent undefined wind values\n                return { ...p, wind: newWind || p.wind };\n            });\n        }\n\n        // Defensive check to ensure losingPlayerId is never undefined\n        const finalLosingPlayerId = isSelfDrawn ? null : losingPlayerId || null;\n\n        await updateDoc(roomRef, {\n            players: updatedPlayers,\n            status: 'lobby',\n            history: arrayUnion({\n                type: 'win',\n                actor: currentUser.uid,\n                isSelfDrawn,\n                losingPlayer: finalLosingPlayerId,\n                tai: taiValue,\n                timestamp: new Date(),\n            })\n        });\n    };\n\n    const handleDeclareDraw = async () => {\n        let updatedPlayers = JSON.parse(JSON.stringify(room.players));\n        const history = room.history || [];\n\n        // Find the index of the last round-ending event to isolate the current round's history.\n        let lastRoundEndIndex = -1;\n        for (let i = history.length - 1; i >= 0; i--) {\n            if (history[i].type === 'win' || history[i].type === 'draw') {\n                lastRoundEndIndex = i;\n                break;\n            }\n        }\n        const currentRoundHistory = history.slice(lastRoundEndIndex + 1);\n\n        // Check if \"money has changed hands\" (i.e., any scoring action occurred during the round).\n        const moneyChangedHands = currentRoundHistory.some(\n            action => action.type === 'kong' || action.type === 'flower_add'\n        );\n\n        // On a draw, winds rotate ONLY if money changed hands.\n        if (moneyChangedHands) {\n            updatedPlayers = updatedPlayers.map(p => ({ ...p, wind: windRotationMap[p.wind] }));\n        }\n    \n        const roomRef = doc(db, 'rooms', roomCode);\n        await updateDoc(roomRef, {\n            players: updatedPlayers,\n            status: 'lobby',\n            history: arrayUnion({\n                type: 'draw',\n                moneyChangedHands: moneyChangedHands,\n                timestamp: new Date(),\n            })\n        });\n    };\n\n    const toggleModal = () => setModalOpen(!modalOpen);\n    const toggleWinModal = () => setWinModalOpen(!winModalOpen);\n\n    if (!roomExists) {\n        return (\n            <div className=\"records-background text-center py-5\">\n                <h2>Room Not Found</h2>\n                <p>The room with code <strong>{roomCode}</strong> does not exist.</p>\n            </div>\n        );\n    }\n\n    const ActionCard = ({ title, children }) => (\n        <Col md={4}>\n            <div className=\"action-section\">\n                <h5 className=\"mb-3\">{title}</h5>\n                {children}\n            </div>\n        </Col>\n    );\n\n    return (\n        <div className=\"records-background\">\n            <FlowerModal\n                isOpen={modalOpen}\n                toggle={toggleModal}\n                onSelect={handleFlowerSelect}\n                availableTiles={room?.availableFlowerTiles || []}\n            />\n            <DeclareWinModal\n                isOpen={winModalOpen}\n                toggle={toggleWinModal}\n                players={players}\n                currentUser={currentUser}\n                room={room}\n                onDeclare={handleDeclareWin}\n            />\n            <Container className=\"py-4\">\n                <div className=\"records-container p-4 rounded-4\">\n                    <h2 className=\"mb-4\"><FontAwesomeIcon icon={faClipboard} /> Game Records</h2>\n                    <Row className=\"mb-5\">\n                        <ActionCard title=\"胡 (Hu - Win)\">\n                            <Button className=\"btn-declare-win w-100\" onClick={toggleWinModal}>🎉 Declare Win</Button>\n                        </ActionCard>\n                        <ActionCard title=\"花 (Hua - Flower)\">\n                            <Button className=\"btn-record-action w-100\" onClick={toggleModal}>\n                                <FontAwesomeIcon icon={faPlus} /> Add Flower Tile\n                            </Button>\n                        </ActionCard>\n                        <ActionCard title=\"槓 (Gang - Kong)\">\n                             <Input type=\"select\" className=\"mb-2\" value={selectedKongType} onChange={e => setSelectedKongType(e.target.value)}>\n                                <option>Concealed Kong</option>\n                                <option>Melded Kong</option>\n                            </Input>\n                            {selectedKongType === 'Melded Kong' && (\n                                <Input type=\"select\" className=\"mb-2\" value={selectedKongTarget} onChange={e => setSelectedKongTarget(e.target.value)}>\n                                    {players.filter(p => p.uid !== currentUser?.uid).map(p => <option key={p.uid} value={p.uid}>{p.wind} - {p.name}</option>)}\n                                 </Input>\n                            )}\n                            <Button className=\"btn-record-action w-100\" onClick={handleRecordKong}>■ Record Kong</Button>\n                        </ActionCard>\n                    </Row>\n                    \n                    <hr className=\"my-4\" />\n\n                    <Row>\n                        <Col>\n                            <div className=\"action-section text-md-start\">\n                                <h5 className=\"mb-3\">Other Actions</h5>\n                                <Button className=\"btn-record-action me-2\" onClick={handleUndoLastAction}><FontAwesomeIcon icon={faUndo} /> Undo Last Action</Button>\n                                <Button className=\"btn-record-action\" onClick={handleDeclareDraw}><FontAwesomeIcon icon={faHandshake} /> Declare Draw</Button>\n                            </div>\n                        </Col>\n                    </Row>\n                </div>\n\n                <div className=\"mt-5\">\n                    <h2 className=\"text-center mb-4\"><FontAwesomeIcon icon={faTrophy} /> Current Scores</h2>\n                    <Row>\n                        {players.map(player => (\n                            <Col md={6} key={player.uid} className=\"mb-4\">\n                                <Card className={`player-score-card h-100 ${player.score === highestScore ? 'highlight' : ''}`}>\n                                    <CardBody className=\"text-center d-flex flex-column justify-content-center\">\n                                        <div className=\"wind-indicator\">{player.wind}</div>\n                                        <div className=\"player-name mt-2\">{player.name}</div>\n                                        <div className=\"player-score my-1\">{player.score > 0 ? '+' : ''}{player.score}</div>\n                                        <small className=\"text-muted mt-auto\">\n                                            Wind: {player.wind.split(' ')[0]} | Games Won: {player.gamesWon || 0}\n                                            {player.gamesWon === mostWins && mostWins !== -1 && <FontAwesomeIcon icon={faTrophy} className=\"ms-2 text-warning\" />}\n                                        </small>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        ))}\n                    </Row>\n                </div>\n            </Container>\n        </div>\n    );\n};\n\nexport default RecordsPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}