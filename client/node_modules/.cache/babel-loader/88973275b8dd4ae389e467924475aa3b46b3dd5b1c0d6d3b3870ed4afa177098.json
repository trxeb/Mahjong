{"ast":null,"code":"var _jsxFileName = \"/Users/angyi/Documents/GitHub/Mahjong/client/src/App.js\",\n  _s = $RefreshSig$();\n// client/src/App.js\nimport React, { useState, useEffect } from 'react';\nimport { auth } from './firebase-config'; // Import auth\nimport { onAuthStateChanged } from 'firebase/auth'; // Import onAuthStateChanged\n\n// Import all your page components from the 'pages' folder\nimport Login from './pages/Login';\nimport SignUp from './pages/SignUp';\nimport Home from './pages/Home';\nimport GameMasterPage from './pages/GameMasterPage';\nimport ProfilePage from './pages/ProfilePage';\nimport RecordsPage from './pages/RecordsPage';\nimport ScorePage from './pages/ScorePage';\n\n// Import the SideBar component\nimport SideBar from './components/SideBar'; // Correctly import SideBar\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // State to manage which page is currently displayed: 'login', 'signup', or 'home', etc.\n  const [currentPage, setCurrentPage] = useState('login');\n  // State to hold the Firebase authenticated user object (null if logged out)\n  const [user, setUser] = useState(null);\n  // State to pass room ID to GM page if applicable\n  const [currentRoomId, setCurrentRoomId] = useState(null);\n  useEffect(() => {\n    // Set up an authentication state listener provided by Firebase\n    // This listener fires whenever the user's sign-in state changes (login, logout)\n    const unsubscribe = onAuthStateChanged(auth, currentUser => {\n      if (currentUser) {\n        // If a user is logged in (currentUser is not null)\n        setUser(currentUser); // Store the user object in state\n        // Only navigate to home if we're not already on a specific page that requires login (like GM page)\n        if (currentPage === 'login' || currentPage === 'signup') {\n          setCurrentPage('home');\n        }\n      } else {\n        // If no user is logged in (currentUser is null)\n        setUser(null); // Clear the user object from state\n        // If user logs out or is not logged in, go to login unless they are trying to sign up\n        if (currentPage !== 'signup') {\n          setCurrentPage('login');\n        }\n      }\n    });\n\n    // Cleanup function: unsubscribe from the auth listener when the component unmounts\n    return () => unsubscribe();\n  }, [currentPage]); // Dependency array: Effect re-runs if 'currentPage' changes.\n  // This helps in scenarios like immediate redirection after signup/login/logout.\n\n  // Function passed to child components (Login, SignUp, Home, etc.) to allow navigation\n  const handleNavigate = (page, id = null) => {\n    setCurrentPage(page);\n    setCurrentRoomId(id); // Store the room ID if navigating to GM page (or other ID-specific pages)\n  };\n\n  // Determine which component to render based on the 'currentPage' state\n  let content;\n  const showSidebar = user; // Show sidebar only if a user is logged in\n\n  switch (currentPage) {\n    case 'login':\n      content = /*#__PURE__*/_jsxDEV(Login, {\n        onNavigate: handleNavigate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 23\n      }, this);\n      break;\n    case 'signup':\n      content = /*#__PURE__*/_jsxDEV(SignUp, {\n        onNavigate: handleNavigate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 23\n      }, this);\n      break;\n    case 'home':\n      content = /*#__PURE__*/_jsxDEV(Home, {\n        onNavigate: handleNavigate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 23\n      }, this);\n      break;\n    case 'gmPage':\n      content = /*#__PURE__*/_jsxDEV(GameMasterPage, {\n        onNavigate: handleNavigate,\n        roomId: currentRoomId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 23\n      }, this);\n      break;\n    case 'profile':\n      content = /*#__PURE__*/_jsxDEV(ProfilePage, {\n        onNavigate: handleNavigate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 23\n      }, this);\n      break;\n    case 'records':\n      content = /*#__PURE__*/_jsxDEV(RecordsPage, {\n        onNavigate: handleNavigate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 23\n      }, this);\n      break;\n    case 'score':\n      content = /*#__PURE__*/_jsxDEV(ScorePage, {\n        onNavigate: handleNavigate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 23\n      }, this);\n      break;\n    default:\n      content = /*#__PURE__*/_jsxDEV(Login, {\n        onNavigate: handleNavigate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 23\n      }, this);\n    // Default to login if page is unrecognized\n  }\n  return (\n    /*#__PURE__*/\n    // Main application container using flexbox for sidebar layout\n    _jsxDEV(\"div\", {\n      className: \"d-flex\",\n      style: {\n        minHeight: '100vh'\n      },\n      children: [showSidebar && /*#__PURE__*/_jsxDEV(SideBar, {\n        onNavigate: handleNavigate,\n        currentPage: currentPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-grow-1\",\n        style: {\n          marginLeft: showSidebar ? '200px' : '0'\n        },\n        children: [content, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(App, \"fIUfL8mtyrGU7w/YV3Nd7XKInW4=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","auth","onAuthStateChanged","Login","SignUp","Home","GameMasterPage","ProfilePage","RecordsPage","ScorePage","SideBar","jsxDEV","_jsxDEV","App","_s","currentPage","setCurrentPage","user","setUser","currentRoomId","setCurrentRoomId","unsubscribe","currentUser","handleNavigate","page","id","content","showSidebar","onNavigate","fileName","_jsxFileName","lineNumber","columnNumber","roomId","className","style","minHeight","children","marginLeft","_c","$RefreshReg$"],"sources":["/Users/angyi/Documents/GitHub/Mahjong/client/src/App.js"],"sourcesContent":["// client/src/App.js\nimport React, { useState, useEffect } from 'react';\nimport { auth } from './firebase-config'; // Import auth\nimport { onAuthStateChanged } from 'firebase/auth'; // Import onAuthStateChanged\n\n// Import all your page components from the 'pages' folder\nimport Login from './pages/Login';\nimport SignUp from './pages/SignUp';\nimport Home from './pages/Home';\nimport GameMasterPage from './pages/GameMasterPage';\nimport ProfilePage from './pages/ProfilePage';     \nimport RecordsPage from './pages/RecordsPage';     \nimport ScorePage from './pages/ScorePage';         \n\n// Import the SideBar component\nimport SideBar from './components/SideBar'; // Correctly import SideBar\n\nexport default function App() {\n    // State to manage which page is currently displayed: 'login', 'signup', or 'home', etc.\n    const [currentPage, setCurrentPage] = useState('login'); \n    // State to hold the Firebase authenticated user object (null if logged out)\n    const [user, setUser] = useState(null); \n    // State to pass room ID to GM page if applicable\n    const [currentRoomId, setCurrentRoomId] = useState(null); \n\n    useEffect(() => {\n        // Set up an authentication state listener provided by Firebase\n        // This listener fires whenever the user's sign-in state changes (login, logout)\n        const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\n            if (currentUser) {\n                // If a user is logged in (currentUser is not null)\n                setUser(currentUser); // Store the user object in state\n                // Only navigate to home if we're not already on a specific page that requires login (like GM page)\n                if (currentPage === 'login' || currentPage === 'signup') { \n                    setCurrentPage('home'); \n                }\n            } else {\n                // If no user is logged in (currentUser is null)\n                setUser(null); // Clear the user object from state\n                // If user logs out or is not logged in, go to login unless they are trying to sign up\n                if (currentPage !== 'signup') {\n                    setCurrentPage('login'); \n                }\n            }\n        });\n\n        // Cleanup function: unsubscribe from the auth listener when the component unmounts\n        return () => unsubscribe();\n    }, [currentPage]); // Dependency array: Effect re-runs if 'currentPage' changes.\n                      // This helps in scenarios like immediate redirection after signup/login/logout.\n\n    // Function passed to child components (Login, SignUp, Home, etc.) to allow navigation\n    const handleNavigate = (page, id = null) => {\n        setCurrentPage(page);\n        setCurrentRoomId(id); // Store the room ID if navigating to GM page (or other ID-specific pages)\n    };\n\n    // Determine which component to render based on the 'currentPage' state\n    let content;\n    const showSidebar = user; // Show sidebar only if a user is logged in\n\n    switch (currentPage) {\n        case 'login':\n            content = <Login onNavigate={handleNavigate} />;\n            break;\n        case 'signup':\n            content = <SignUp onNavigate={handleNavigate} />;\n            break;\n        case 'home':\n            content = <Home onNavigate={handleNavigate} />;\n            break;\n        case 'gmPage': \n            content = <GameMasterPage onNavigate={handleNavigate} roomId={currentRoomId} />;\n            break;\n        case 'profile': \n            content = <ProfilePage onNavigate={handleNavigate} />;\n            break;\n        case 'records': \n            content = <RecordsPage onNavigate={handleNavigate} />;\n            break;\n        case 'score': \n            content = <ScorePage onNavigate={handleNavigate} />;\n            break;\n        default:\n            content = <Login onNavigate={handleNavigate} />; // Default to login if page is unrecognized\n    }\n\n    return (\n        // Main application container using flexbox for sidebar layout\n        <div className=\"d-flex\" style={{ minHeight: '100vh' }}>\n            {/* SideBar, shown only when logged in */}\n            {showSidebar && (\n                <SideBar onNavigate={handleNavigate} currentPage={currentPage} /> \n            )}\n\n            {/* Main content area. */}\n            {/* This margin pushes content to the right when sidebar is visible. */}\n            <div className=\"flex-grow-1\" style={{ marginLeft: showSidebar ? '200px' : '0' }}> \n                {content} {/* This will render the currently selected page component */}\n            </div>\n        </div>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}